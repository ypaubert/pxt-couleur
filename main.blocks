<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="gqxct:^R2u?IDTPk8A.r" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="rpUikIZLPo$5f|;GN3dw" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace AbletonRadio {" line1="" line2="    let R = 0" line3="    let G = 0" line4="    let B = 0" line5="    let maxVal = 0" line6="    let minVal = 0" line7="    let Delta = 0" line8="    let Hue = 0" line9="" line10="    //% block" line11="    export function noteDeLaCouleur(): number {" line12="        return Note_de_cette_couleur(couleur_depuis_RGB(TCS34725.getSensorData(RGB.RED), TCS34725.getSensorData(RGB.GREEN), TCS34725.getSensorData(RGB.BLUE)))" line13="    }" line14="" line15="    //% block" line16="    export function StartCapteurCouleur() {" line17="        TCS34725.start(TCS34725_ATIME.TIME_2_4_MS, TCS34725_AGAIN.GAIN_1X)" line18="    }" line19="" line20="    //% block" line21="    export function Note_de_cette_couleur(colorHue: number) {" line22="        if (colorHue &gt; 330 || colorHue &lt; 20) {" line23="            // red" line24="            return 37" line25="        }" line26="        if (colorHue &gt;= 120 &amp;&amp; colorHue &lt; 180) {" line27="            // orange" line28="            return 38" line29="        }" line30="        if (colorHue &gt;= 210 &amp;&amp; colorHue &lt; 270) {" line31="            // yellow" line32="            return 39" line33="        }" line34="        if (colorHue &gt;= 190 &amp;&amp; colorHue &lt; 210) {" line35="            // green" line36="            return 40" line37="        }" line38="        if (colorHue &gt;= 260 &amp;&amp; colorHue &lt; 330) {" line39="            // cyan" line40="            return 41" line41="        }" line42="        if (colorHue &gt;= 30 &amp;&amp; colorHue &lt; 120) {" line43="            // bleu" line44="            return 42" line45="        }" line46="        if (colorHue &gt;= 180 &amp;&amp; colorHue &lt; 190) {" line47="            // violet" line48="            return 43" line49="        }" line50="        return 0" line51="    }" line52="" line53="    //% block" line54="    export function couleur_depuis_RGB(color_r: number, color_g: number, color_b: number) {" line55="        R = color_r * 100 / 255" line56="        G = color_g * 100 / 255" line57="        B = color_b * 100 / 255" line58="        maxVal = Math.max(R, Math.max(G, B))" line59="        minVal = Math.min(R, Math.min(G, B))" line60="        Delta = maxVal - minVal" line61="        if (Delta &lt; 0) {" line62="            Hue = 0" line63="        } else if (maxVal == R &amp;&amp; G &gt;= B) {" line64="            Hue = 60 * ((G - B) * 100 / Delta) / 100" line65="        } else if (maxVal == R &amp;&amp; G &lt; B) {" line66="            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100" line67="        } else if (maxVal == G) {" line68="            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100" line69="        } else if (maxVal == B) {" line70="            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100" line71="        }" line72="        return Hue" line73="    }" line74="" line75="}" numlines="76"></mutation></block></statement></block><block type="device_forever" id="_Pr3i$e!^i]{pkWiM_CT" x="1752" y="0"></block></xml>